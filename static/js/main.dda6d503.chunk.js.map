{"version":3,"sources":["components/Card.js","components/ElapsedTime.js","components/Stars.js","screens/GameBoard.js","screens/GameStart.js","services/game.js","App.js","reportWebVitals.js","index.js"],"names":["Card","card","index","onCardClick","flippedCount","imageUrl","process","cardNum","className","onClick","isFlipped","isVisible","src","alt","ElapsedTime","props","state","secondsElapsed","seconds","timeStr","stop","this","setState","currentState","SECONDS","Date","toISOString","substr","nextProps","nextState","clearInterval","interval","setInterval","tick","bind","Component","Stars","stars","useState","starArr","setStarArr","useEffect","map","isStar","xmlns","viewBox","d","GameBoard","gameData","onCardUpdate","onRestart","cards","setCards","setFlippedCount","handleCardClick","cardIndex","flippedCardsCount","newCards","length","newGameData","localStorage","setItem","JSON","stringify","timer","setTimeout","reduce","a","c","push","clearTimeout","game_ended","elapsed_time","error_score","rating","protoType","difficulty","PropTypes","string","isRequired","GameStart","onDifficultySelection","func","getRandomCards","numberOfCards","orderedCardArray","Array","from","_","i","array","j","Math","floor","random","shuffle","startGame","cardsArray","getCrads","created_at","getUpdatedGameData","startTime","timeDiff","round","ellapsedSeconds","flippedCards","firstCrad","secondCard","App","setGameData","difficultySelected","selectedDifficulty","data","getItem","localGameData","parse","updatedGameData","unFlippedCards","getGameData","removeItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dda6d503.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nexport default function Card({ card, index, onCardClick, flippedCount }) {\r\n  const imageUrl = `${process.env.PUBLIC_URL}/images/${card.cardNum}.png`;\r\n\r\n  const handleClick = () => {\r\n    if (!card.isFlipped) {\r\n      onCardClick(index, flippedCount);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"scene cursor-pointer rounded-lg transition duration-150 ease-in-out transform  hover:scale-110\"\r\n      onClick={handleClick}\r\n    >\r\n      {card.isVisible ? (\r\n        <div className={`card ${card.isFlipped ? \"is-flipped\" : \"\"}`}>\r\n          <div className=\"shadow-md rounded-lg mx-auto py-4 px-4 card__face card__face--front\"></div>\r\n          <div className=\"bg-gray-100 mx-auto shadow-md rounded-lg py-4 px-4 card__face card__face--back\">\r\n            <img src={imageUrl} alt={card.cardNum} />\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ElapsedTime extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      secondsElapsed: props.seconds,\r\n      timeStr: \"00:00:00\",\r\n      stop: props.stop,\r\n    };\r\n  }\r\n\r\n  tick() {\r\n    this.setState((currentState) => {\r\n      const SECONDS = currentState.secondsElapsed + 1;\r\n      const timeStr = new Date(SECONDS * 1000).toISOString().substr(11, 8);\r\n\r\n      return { secondsElapsed: SECONDS, timeStr };\r\n    });\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.stop && this.state.secondsElapsed !== this.props.seconds) {\r\n      clearInterval(this.interval);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(this.tick.bind(this), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return <>{this.state.timeStr}</>;\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Stars({ stars }) {\r\n  const [starArr, setStarArr] = useState([0, 0, 0, 0, 0]);\r\n\r\n  useEffect(() => {\r\n    for (let index = 0; index < stars; index++) {\r\n      starArr[index] = 1;\r\n    }\r\n    setStarArr(starArr);\r\n  }, [starArr, stars]);\r\n\r\n  return (\r\n    <div>\r\n      {starArr.map((isStar, index) => {\r\n        return (\r\n          <svg\r\n            key={index}\r\n            className={`inline mx-1 w-4 h-4 fill-current ${\r\n              isStar ? \"text-yellow-500\" : \"text-gray-500\"\r\n            }`}\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 20 20\"\r\n          >\r\n            <path d=\"M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z\" />\r\n          </svg>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nStars.propTypes = {\r\n  stars: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Stars;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Card from \"../components/Card\";\r\nimport ElapsedTime from \"../components/ElapsedTime\";\r\nimport Stars from \"../components/Stars\";\r\n\r\nfunction GameBoard({ gameData, onCardUpdate, onRestart }) {\r\n  const [cards, setCards] = useState([]);\r\n\r\n  const [flippedCount, setFlippedCount] = useState(0);\r\n\r\n  const handleCardClick = (cardIndex, flippedCardsCount) => {\r\n    let newCards = [];\r\n    if (flippedCardsCount < 2) {\r\n      setFlippedCount(flippedCardsCount + 1);\r\n      newCards = [...cards];\r\n\r\n      newCards[cardIndex].isFlipped = true;\r\n      setCards(newCards);\r\n    }\r\n\r\n    // if one card is already flipped then send cards data to server\r\n    if (flippedCardsCount === 1) {\r\n      if (newCards.length) {\r\n        const newGameData = { ...gameData };\r\n        newGameData.cards = newCards;\r\n        localStorage.setItem(\"gameData\", JSON.stringify(newGameData));\r\n      }\r\n\r\n      // hide cards after 3 seconds\r\n\r\n      const timer = setTimeout(() => {\r\n        const res = onCardUpdate(cards);\r\n\r\n        const newCards = res.cards.reduce((a, c) => {\r\n          c.isFlipped = false;\r\n          a.push(c);\r\n          return a;\r\n        }, []);\r\n\r\n        setCards(newCards);\r\n        setFlippedCount(0);\r\n        clearTimeout(timer);\r\n      }, 3000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCards(gameData.cards);\r\n  }, [gameData]);\r\n\r\n  return (\r\n    <main className=\"my-10 mx-auto max-w-3xl px-4 sm:px-6 lg:px-8 sm:my-6  md:my-8 lg:my-10  xl:my-14\">\r\n      <h1 className=\"text-center mb-4 text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl\">\r\n        <span className=\"inline\">Memory</span>{\" \"}\r\n        <span className=\"text-indigo-600 inline\">Game</span>\r\n      </h1>\r\n\r\n      <div className=\"grid grid-cols-2 gap-4  text-base text-red-500 md:text-xl mb-4\">\r\n        <div>\r\n          Elapsed Time:{\" \"}\r\n          <ElapsedTime\r\n            stop={gameData.game_ended}\r\n            seconds={gameData.elapsed_time}\r\n          />\r\n        </div>\r\n        <div className=\"text-right\">Error Score: {gameData.error_score}</div>\r\n      </div>\r\n      {gameData.game_ended ? (\r\n        <div className=\"text-center\">\r\n          <div className=\"md:text-2xl my-4\">Game Ended</div>\r\n          <div>\r\n            <Stars stars={gameData.rating} />\r\n          </div>\r\n          <div className=\"text-sm\">You got {gameData.rating} stars</div>\r\n          <div>\r\n            <button\r\n              onClick={onRestart}\r\n              className=\"mt-4 focus:outline-none focus:ring-4 focus:ring-pink-500 focus:ring-opacity-50 mx-auto flex items-center justify-center px-6 py-2 border border-transparent text-base font-medium rounded-md text-white bg-pink-600 hover:bg-pink-700 md:py-2 md:text-lg md:px-10\"\r\n            >\r\n              Restart\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"grid grid-cols-2 gap-4 md:grid-cols-5\">\r\n          {cards.map((card, index) => (\r\n            <Card\r\n              key={index}\r\n              card={card}\r\n              index={index}\r\n              onCardClick={handleCardClick}\r\n              flippedCount={flippedCount}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nGameBoard.protoType = {\r\n  difficulty: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction GameStart({ onDifficultySelection }) {\r\n  return (\r\n    <div>\r\n      <main className=\"mt-10 mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 sm:mt-12  md:mt-16 lg:mt-20  xl:mt-28\">\r\n        <div className=\"text-center\">\r\n          <h1 className=\"text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl\">\r\n            <span className=\"inline\">Memory</span>{\" \"}\r\n            <span className=\"text-indigo-600 inline\">Game</span>\r\n          </h1>\r\n          <p className=\"mt-10 sm:mt-10  md:mt-10 lg:mt-12  xl:mt-16 text-base text-gray-500  sm:text-lg sm:max-w-xl sm:mx-auto md:text-xl \">\r\n            Please select game difficulty:\r\n          </p>\r\n          <div className=\"mt-5 sm:mt-8 sm:flex justify-center\">\r\n            <div className=\"rounded-md shadow\">\r\n              <button\r\n                onClick={() => onDifficultySelection(\"easy\")}\r\n                className=\"focus:outline-none focus:ring-4 focus:ring-pink-500 focus:ring-opacity-50  w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-pink-600 hover:bg-pink-700 md:py-4 md:text-lg md:px-10\"\r\n              >\r\n                Easy\r\n              </button>\r\n            </div>\r\n            <div className=\"mt-3 sm:mt-0 sm:ml-3\">\r\n              <button\r\n                onClick={() => onDifficultySelection(\"medium\")}\r\n                className=\"focus:outline-none focus:ring-4 focus:ring-pink-500 focus:ring-opacity-50  w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-pink-600 hover:bg-pink-700 md:py-4 md:text-lg md:px-10\"\r\n              >\r\n                Medium\r\n              </button>\r\n            </div>\r\n            <div className=\"mt-3 sm:mt-0 sm:ml-3\">\r\n              <button\r\n                onClick={() => onDifficultySelection(\"hard\")}\r\n                className=\"focus:outline-none focus:ring-4 focus:ring-pink-500 focus:ring-opacity-50 w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-pink-600 hover:bg-pink-700 md:py-4 md:text-lg md:px-10\"\r\n              >\r\n                Hard\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nGameStart.protoType = {\r\n  onDifficultySelection: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default GameStart;\r\n","const shuffle = (array) => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    // random index from 0 to i\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n\r\n    // swap elements array[i] and array[j] using destructuring assignment\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n};\r\n\r\nconst getRandomCards = (numberOfCards) => {\r\n  // generate array from 1 to numberOfCards\r\n  const orderedCardArray = Array.from(\r\n    { length: numberOfCards },\r\n    (_, i) => i + 1\r\n  );\r\n\r\n  // shuffle two sets of cards\r\n  return shuffle([...orderedCardArray, ...orderedCardArray]);\r\n};\r\n\r\nconst getCrads = (difficulty) => {\r\n  let cardsArray = [];\r\n  switch (difficulty) {\r\n    case \"easy\":\r\n      cardsArray = getRandomCards(5);\r\n      break;\r\n    case \"medium\":\r\n      cardsArray = getRandomCards(10);\r\n      break;\r\n    case \"hard\":\r\n      cardsArray = getRandomCards(25);\r\n      break;\r\n\r\n    default:\r\n      cardsArray = getRandomCards(5);\r\n      break;\r\n  }\r\n\r\n  return cardsArray.reduce((a, c) => {\r\n    a.push({ cardNum: c, isFlipped: false, isVisible: true });\r\n    return a;\r\n  }, []);\r\n};\r\n\r\nconst startGame = (difficulty) => {\r\n  const cards = getCrads(difficulty);\r\n  const created_at = new Date();\r\n  const error_score = 0;\r\n  const elapsed_time = 0;\r\n  const game_ended = false;\r\n  const rating = 0;\r\n\r\n  return {\r\n    created_at,\r\n    error_score,\r\n    elapsed_time,\r\n    game_ended,\r\n    rating,\r\n    cards,\r\n  };\r\n};\r\n\r\nconst ellapsedSeconds = (startTime) => {\r\n  const currentTime = new Date();\r\n\r\n  let timeDiff = currentTime - startTime; //in ms\r\n\r\n  // strip the ms\r\n  timeDiff /= 1000;\r\n\r\n  // get seconds\r\n  return Math.round(timeDiff);\r\n};\r\n\r\nconst rating = ({ error_score, elapsed_time, cards }) => {\r\n  const rating = (error_score * 60 + elapsed_time) / cards.length;\r\n\r\n  let stars = 0;\r\n  switch (true) {\r\n    case rating <= 100:\r\n      stars = 5;\r\n      break;\r\n    case rating <= 150:\r\n      stars = 4;\r\n      break;\r\n    case rating <= 200:\r\n      stars = 3;\r\n      break;\r\n    case rating <= 250:\r\n      stars = 2;\r\n      break;\r\n    default:\r\n      stars = 1;\r\n  }\r\n\r\n  return stars;\r\n};\r\n\r\nconst getUpdatedGameData = (gameData) => {\r\n  if (typeof gameData.created_at === \"string\") {\r\n    gameData.created_at = new Date(gameData.created_at);\r\n  }\r\n  gameData.elapsed_time = ellapsedSeconds(gameData.created_at);\r\n\r\n  const { cards } = gameData;\r\n\r\n  const flippedCards = cards.reduce((a, c, i) => {\r\n    if (c.isFlipped) {\r\n      c.index = i;\r\n      a.push(c);\r\n    }\r\n    return a;\r\n  }, []);\r\n\r\n  if (flippedCards.length !== 2) {\r\n    return gameData;\r\n    // throw new Error(\"There must be two cards selected only\");\r\n  }\r\n\r\n  const [firstCrad, secondCard] = flippedCards;\r\n\r\n  if (firstCrad.cardNum !== secondCard.cardNum) {\r\n    gameData.error_score++;\r\n  } else {\r\n    gameData.cards[firstCrad.index].isVisible = false;\r\n    gameData.cards[secondCard.index].isVisible = false;\r\n  }\r\n\r\n  const visibleCount = gameData.cards.reduce((a, c) => {\r\n    a = c.isVisible ? a + 1 : a;\r\n    return a;\r\n  }, 0);\r\n\r\n  // end game if all cards have been flipped\r\n  if (visibleCount === 0) {\r\n    gameData.game_ended = true;\r\n    gameData.rating = rating(gameData);\r\n  }\r\n\r\n  return gameData;\r\n};\r\n\r\nexport { startGame, getUpdatedGameData };\r\n","import { useEffect, useState } from \"react\";\nimport GameBoard from \"./screens/GameBoard\";\nimport GameStart from \"./screens/GameStart\";\nimport { getUpdatedGameData, startGame } from \"./services/game\";\n\nfunction App() {\n  const [gameData, setGameData] = useState({});\n\n  const difficultySelected = async (selectedDifficulty) => {\n    const data = startGame(selectedDifficulty);\n    setGameData(data);\n    localStorage.setItem(\"gameData\", JSON.stringify(data));\n  };\n\n  const getGameData = () => {\n    if (localStorage.getItem(\"gameData\")) {\n      const localGameData = JSON.parse(localStorage.getItem(\"gameData\"));\n\n      const updatedGameData = getUpdatedGameData(localGameData);\n\n      const unFlippedCards = updatedGameData.cards.reduce((a, c) => {\n        c.isFlipped = false;\n        a.push(c);\n        return a;\n      }, []);\n\n      updatedGameData.cards = unFlippedCards;\n\n      setGameData(updatedGameData);\n    }\n  };\n\n  useEffect(() => {\n    getGameData();\n  }, []);\n\n  const handleCardUpdate = (cards) => {\n    const newGameData = { ...gameData, cards: cards };\n    const updatedGameData = getUpdatedGameData(newGameData);\n    setGameData(updatedGameData);\n    localStorage.setItem(\"gameData\", JSON.stringify(newGameData));\n\n    return updatedGameData;\n  };\n\n  const handleRestart = () => {\n    localStorage.removeItem(\"gameData\");\n    setGameData({});\n  };\n\n  return (\n    <>\n      {gameData.cards ? (\n        <GameBoard\n          gameData={gameData}\n          onCardUpdate={handleCardUpdate}\n          onRestart={handleRestart}\n        />\n      ) : (\n        <GameStart onDifficultySelection={difficultySelected} />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}